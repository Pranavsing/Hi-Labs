#include<bits/stdc++.h>
using namespace std;

class DisjointSet{
    public:
    vector<int>size,par;
    DisjointSet(int n){
        size.resize(n+1);
        par.resize(n+1);
        for(int i=0;i<=n;i++){
            par[i]=i;
            size[i]=1;
        }
    }
    int findUPar(int node){
        if(node==par[node]){
            return node;
        }
        return par[node]=findUPar(par[node]);
    }
    void dsu(int a,int b){
        int u=findUPar(a);
        int v=findUPar(b);
        if(u==v){
            return;
        }
        if(size[u]>=size[v]){
            par[v]=u;
            size[u]+=size[v];
        }
        else{
            par[u]=v;
            size[v]+=size[u];
        }
    }
};

// int s[1000001];
    int n=1000001;
    DisjointSet ds(n);

void sieve(set<int>&st){
    // cout<<"OK"<<endl;
    for(auto it:st){
        // int a=ds.par[it];
        // cout<<it<<"->";
        for(int j=2*it;j<n;j+=it){
            // cout<<j<<" ";
            ds.dsu(it,j);
        }
    }
}

int main(){
    int m;
    cin>>m;
    vector<int>arr(m);
    set<int>st;
    for(int i=0;i<m;i++){
        cin>>arr[i];
        st.insert(arr[i]);
        // cout<<arr[i]<<" "<<ds.findUPar(arr[i])<<endl;
    }
    sieve(st);
    // cout<<"ok"<<endl;/
    int ctr=0;
    for(auto it:st){
        // cout<<it<<" "<<ds.findUPar(it)<<endl;
        if(ds.findUPar(it)==it){
            // cout<<it<<" ";
            ctr++;
        }
    }
    cout<<ctr<<endl;
    // for(int i=1;i<=1e6;i++){
    //     cout<<i<<" ";
    // }

    
    return 0;
}
